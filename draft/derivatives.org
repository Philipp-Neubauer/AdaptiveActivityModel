#+BEGIN_SRC  sage :session Sage
print 'This code will be evaluated in the process buffer *Sage*.'
from sage.symbolic.integration.integral import definite_integral
#+END_SRC

#+RESULTS:
: This code will be evaluated in the process buffer *Sage*.

#+BEGIN_SRC  sage :session Sage
var('Mq, Eq,tauq,P,a,phi, beta, tau, h, tc, m, q,f, p, n,gamma,E,delta,k,e,o,O,c,v,M,nu')
#+END_SRC

#+RESULTS:
#+begin_example

(Mq,
 Eq,
 tauq,
 P,
 a,
 phi,
 beta,
 tau,
 h,
 tc,
 m,
 q,
 f,
 p,
 n,
 gamma,
 E,
 delta,
 k,
 e,
 o,
 O,
 c,
 v,
 M,
 nu)
#+end_example

#+BEGIN_SRC  sage :session Sage
f = ((1-beta-phi)*((tau*gamma*m^p)/(tau*gamma*m^p+h*tc*m^q))*tc*h*m^q-(1+tau*delta)*tc*k*m^n)/((tau*v+M)*m^nu)
fp = ((1-beta-phi)*Eq*h*m^q-(1+tauq*delta)*k*m^n)/((M+tauq*(v+Mq))*m^nu)
fo = ((1-beta-phi)*E*h*m^q-(1+tau*delta)*k*m^n)/((M+tau*v)*m^nu)


simplify(solve(f.diff(tau)==0,tau))
simplify(f.diff(m))
solve(fp.diff(m)-fo.diff(m)==0,Mq)
#+END_SRC

#+RESULTS:
: [tau == -(M*delta*h*k*m^(n + p + q)*tc - h*k*m^(n + p + q)*tc*v - sqrt(-((beta - 1)*h*k*m^(n + 2*p + 3*q) + h*k*m^(n + 2*p + 3*q)*phi)*tc^2*v^2 - ((beta - 1)*delta*gamma*k*m^(n + 3*p + 2*q) + delta*gamma*k*m^(n + 3*p + 2*q)*phi)*M^2*tc + (((beta - 1)*delta*h*k*m^(n + 2*p + 3*q) + delta*h*k*m^(n + 2*p + 3*q)*phi)*tc^2 + (gamma*h*m^(3*p + 3*q)*phi^2 + (beta - 1)*gamma*k*m^(n + 3*p + 2*q) + (beta^2 - 2*beta + 1)*gamma*h*m^(3*p + 3*q) + (2*(beta - 1)*gamma*h*m^(3*p + 3*q) + gamma*k*m^(n + 3*p + 2*q))*phi)*tc)*M*v)*h)/(M*delta*gamma*k*m^(n + 2*p) - ((beta - 1)*gamma*h*m^(2*p + q) + gamma*h*m^(2*p + q)*phi + gamma*k*m^(n + 2*p))*v), tau == -(M*delta*h*k*m^(n + p + q)*tc - h*k*m^(n + p + q)*tc*v + sqrt(-((beta - 1)*h*k*m^(n + 2*p + 3*q) + h*k*m^(n + 2*p + 3*q)*phi)*tc^2*v^2 - ((beta - 1)*delta*gamma*k*m^(n + 3*p + 2*q) + delta*gamma*k*m^(n + 3*p + 2*q)*phi)*M^2*tc + (((beta - 1)*delta*h*k*m^(n + 2*p + 3*q) + delta*h*k*m^(n + 2*p + 3*q)*phi)*tc^2 + (gamma*h*m^(3*p + 3*q)*phi^2 + (beta - 1)*gamma*k*m^(n + 3*p + 2*q) + (beta^2 - 2*beta + 1)*gamma*h*m^(3*p + 3*q) + (2*(beta - 1)*gamma*h*m^(3*p + 3*q) + gamma*k*m^(n + 3*p + 2*q))*phi)*tc)*M*v)*h)/(M*delta*gamma*k*m^(n + 2*p) - ((beta - 1)*gamma*h*m^(2*p + q) + gamma*h*m^(2*p + q)*phi + gamma*k*m^(n + 2*p))*v)]
: ((beta + phi - 1)*gamma*h*m^(p + q)*tau*tc/(gamma*m^p*tau + h*m^q*tc) + (delta*tau + 1)*k*m^n*tc)*m^(-nu - 1)*nu/(tau*v + M) - ((beta + phi - 1)*gamma*h*m^(p + q - 1)*p*tau*tc/(gamma*m^p*tau + h*m^q*tc) + (beta + phi - 1)*gamma*h*m^(p + q - 1)*q*tau*tc/(gamma*m^p*tau + h*m^q*tc) + (delta*tau + 1)*k*m^(n - 1)*n*tc - (gamma*m^(p - 1)*p*tau + h*m^(q - 1)*q*tc)*(beta + phi - 1)*gamma*h*m^(p + q)*tau*tc/(gamma*m^p*tau + h*m^q*tc)^2)/((tau*v + M)*m^nu)
: [Mq == -(((beta - 1)*h*m^(q - 1)*nu + h*m^(q - 1)*nu*phi - ((beta - 1)*h*m^(q - 1) + h*m^(q - 1)*phi)*q)*E*tauq*v - (Eq*h*m^(q - 1)*nu*phi + (Eq*beta - Eq)*h*m^(q - 1)*nu - ((beta - 1)*h*m^(q - 1)*nu + h*m^(q - 1)*nu*phi - ((beta - 1)*h*m^(q - 1) + h*m^(q - 1)*phi)*q)*E - (Eq*h*m^(q - 1)*phi + (Eq*beta - Eq)*h*m^(q - 1))*q + (delta*k*m^(n - 1)*n - delta*k*m^(n - 1)*nu)*tau - (delta*k*m^(n - 1)*n - delta*k*m^(n - 1)*nu)*tauq)*M - ((Eq*h*m^(q - 1)*nu*phi - k*m^(n - 1)*n + ((Eq*beta - Eq)*h*m^(q - 1) + k*m^(n - 1))*nu - (Eq*h*m^(q - 1)*phi + (Eq*beta - Eq)*h*m^(q - 1))*q)*tau + (k*m^(n - 1)*n - k*m^(n - 1)*nu)*tauq)*v)/(((beta - 1)*h*m^(q - 1)*nu + h*m^(q - 1)*nu*phi - ((beta - 1)*h*m^(q - 1) + h*m^(q - 1)*phi)*q)*E*tauq - (k*m^(n - 1)*n - k*m^(n - 1)*nu + (delta*k*m^(n - 1)*n - delta*k*m^(n - 1)*nu)*tau)*tauq)]


#+BEGIN_SRC  sage :session Sage
de = diff(log(m),t) -(h*m^p-k*m)
diff(m,t)
#+END_SRC

#+RESULTS:
: log(-(delta*tau + 1)*k*m^n*tc - (beta + phi - 1)*h*m^q*tau*tc/(h*m^(-p + q)*tc/gamma + tau))





#+BEGIN_SRC  sage :session Sage
var('R, t, h, T, w, q, p, n,g,E,d,k,tau0')
tau = function('tau', t)
de = diff(tau,t) - k*tau*(1-tau)*T
h = desolve(de, tau, ivar=t,ics=[0,tau0])
h
#+END_SRC

#+RESULTS:
: (R, t, h, T, w, q, p, n, g, E, d, k, tau0)
: -(log(tau(t) - 1) - log(tau(t)))/(T*k) == (T*k*t - log(tau0 - 1) + log(tau0))/(T*k)

#+BEGIN_SRC  sage :session Sage
var('tau, _C, tk')
solve(-(log((tau - 1)/tau)) == tk*_C + tk*t,tau)
solve(-(log((tau - 1)/tau)) == (tk*t - log(tau0 - 1) + log(tau0)),tau)
#+END_SRC

#+RESULTS:
: (tau, _C, tk)
: [tau == -1/(e^(-_C*tk - t*tk) - 1)]
: [tau == tau0*e^(t*tk)/(tau0*e^(t*tk) - tau0 + 1)]

#+BEGIN_SRC  sage :session Sage
simplify(log(tau0*e^(t*tk)/(tau0*e^(t*tk) - tau0 + 1))
#+END_SRC

#+RESULTS:
: log(tau0*e^(t*tk)/(tau0*e^(t*tk) - tau0 + 1))

